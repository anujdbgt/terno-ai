# Generated by Django 5.0.4 on 2024-07-18 08:57

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('terno', '0014_grouptablerowfilter_tablerowfilter'),
    ]

    operations = [
        migrations.CreateModel(
            name='LLMConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('llm_type', models.CharField(choices=[('openai', 'OpenAI'), ('gemini', 'Gemini'), ('claude', 'Claude')], help_text='Select the type of LLM (e.g., OpenAI, Gemini, etc.).', max_length=50)),
                ('api_key', models.CharField(help_text='Enter the API key for accessing the LLM service.', max_length=100)),
                ('model_name', models.CharField(blank=True, help_text='Specify the model name to use (leave blank for default).', max_length=100, null=True)),
                ('temperature', models.FloatField(blank=True, help_text='Set the sampling temperature where higher values make output more random (leave blank for default).', null=True)),
                ('custom_system_message', models.TextField(blank=True, help_text='Optional system message to set the behavior of the assistant (leave blank for default)', null=True)),
                ('max_tokens', models.IntegerField(blank=True, help_text='Specify the maximum number of tokens to generate (leave blank for default).', null=True)),
                ('top_p', models.FloatField(blank=True, help_text='Set the top-p sampling value (controls diversity via nucleus sampling). Leave blank for default.', null=True)),
                ('enabled', models.BooleanField(default=True, help_text='Make sure to enable only one LLM at a time.')),
            ],
        ),
        migrations.DeleteModel(
            name='LLMApiKey',
        ),
    ]
